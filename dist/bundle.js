/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./dist/src/DefaultSettings.js":
/*!*************************************!*\
  !*** ./dist/src/DefaultSettings.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DefaultSettings\": () => (/* binding */ DefaultSettings)\n/* harmony export */ });\nvar DefaultSettings = {\r\n    SIZE_WIDTH: 300,\r\n    SIZE_HEIGHT: 300,\r\n    SMALL_W: 40,\r\n    SMALL_H: 40\r\n};\r\n// export default DefaultSettings;\r\n\n\n//# sourceURL=webpack://proyectoscanner/./dist/src/DefaultSettings.js?");

/***/ }),

/***/ "./dist/src/ImageLocal.js":
/*!********************************!*\
  !*** ./dist/src/ImageLocal.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ImageLocal\": () => (/* binding */ ImageLocal)\n/* harmony export */ });\n/* harmony import */ var _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DefaultSettings.js */ \"./dist/src/DefaultSettings.js\");\n\r\nvar ImageLocal = /** @class */ (function () {\r\n    // protected document: HTMLDocument;\r\n    function ImageLocal(p, ready) {\r\n        this.img = new Image();\r\n        this.screen = p;\r\n        // this.document = d;\r\n        this.readyToDraw = ready;\r\n        this.isScaled = false;\r\n        this.drawSmallImg = this.drawSmallImg.bind(this);\r\n        this.handleFileSelect = this.handleFileSelect.bind(this);\r\n        this.onload = this.onload.bind(this);\r\n    }\r\n    ImageLocal.prototype.handleFileSelect = function (evt) {\r\n        var files;\r\n        if (evt.type === \"drop\") {\r\n            evt.stopPropagation();\r\n            evt.preventDefault();\r\n            files = evt.dataTransfer.files;\r\n        }\r\n        if (evt.type === \"change\")\r\n            files = evt.target.files; // FileList object\r\n        // files is a FileList of File objects. List some properties.\r\n        var output = [];\r\n        //console.log(evt)\r\n        var f = files[0];\r\n        output.push('<li><strong>', f.name, '</strong> (', f.type || 'n/a', ') - ', f.size, ' bytes, last modified: ', f.lastModifiedDate.toLocaleDateString(), '</li>');\r\n        this.img.src = f.name;\r\n        this.readyToDraw = true;\r\n        document.getElementById('list').innerHTML = '<ul>' + output.join('') + '</ul>';\r\n        this.onload();\r\n    };\r\n    ImageLocal.prototype.drawSmallImg = function (evt) {\r\n        var xPos = evt.offsetX - 2;\r\n        var yPos = evt.offsetY - 2;\r\n        //console.log(xPos, yPos);\r\n        var pixel = this.screen.getImageData(xPos, yPos, 1, 1);\r\n        if (this.readyToDraw) {\r\n            if (this.isScaled) {\r\n                xPos *= (this.img.width / _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__.DefaultSettings.SIZE_WIDTH);\r\n                yPos *= (this.img.height / _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__.DefaultSettings.SIZE_HEIGHT);\r\n            }\r\n            this.screen.clearRect(0, 0, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__.DefaultSettings.SIZE_WIDTH, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__.DefaultSettings.SIZE_HEIGHT);\r\n            this.screen.strokeStyle = \"lightgray\";\r\n            this.screen.imageSmoothingEnabled = false;\r\n            this.isScaled ?\r\n                this.screen.drawImage(this.img, 0, 0, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__.DefaultSettings.SIZE_WIDTH, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__.DefaultSettings.SIZE_HEIGHT)\r\n                : this.screen.drawImage(this.img, 0, 0, this.img.width, this.img.height);\r\n            this.screen.strokeRect(evt.offsetX + 5, evt.offsetY + 5, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__.DefaultSettings.SMALL_W, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__.DefaultSettings.SMALL_H);\r\n            this.screen.drawImage(this.img, Math.floor(xPos - 3), Math.floor(yPos - 3), 5, 5, evt.offsetX + 5, evt.offsetY + 5, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__.DefaultSettings.SMALL_W, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__.DefaultSettings.SMALL_H);\r\n            var color = document.getElementById('color');\r\n            var data = pixel.data;\r\n            var rgba = 'rgba(' + data[0] + ', ' + data[1] +\r\n                ', ' + data[2] + ', ' + (data[3] / 255) + ')';\r\n            color.style.background = rgba;\r\n            //color.textContent = rgba;\r\n            // console.log(xPos);\r\n            //console.log(yPos);\r\n            document.getElementById('rgb').innerHTML = '<strong>' + rgba + '</strong> ';\r\n        }\r\n    };\r\n    ImageLocal.prototype.getImage = function () {\r\n        return this.img;\r\n    };\r\n    ImageLocal.prototype.getScreen = function () {\r\n        return this.screen;\r\n    };\r\n    ImageLocal.prototype.setScaled = function (v) {\r\n        this.isScaled = v;\r\n    };\r\n    ImageLocal.prototype.onload = function () {\r\n        this.getScreen().clearRect(0, 0, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__.DefaultSettings.SIZE_WIDTH, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__.DefaultSettings.SIZE_HEIGHT);\r\n        /** SI nuestro canvas es mas pequeño que la imagen se dibuja a su escala normal,\r\n         * si es mas grande se dibuja reescalado al ancho de ventana por default  */\r\n        if (this.getImage().width > _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__.DefaultSettings.SIZE_WIDTH\r\n            || this.getImage().height > _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__.DefaultSettings.SIZE_HEIGHT) {\r\n            this.getScreen().drawImage(this.getImage(), 0, 0, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__.DefaultSettings.SIZE_WIDTH, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_0__.DefaultSettings.SIZE_HEIGHT);\r\n            this.setScaled(true);\r\n        }\r\n        else {\r\n            this.getScreen().drawImage(this.getImage(), 0, 0, this.getImage().width, this.getImage().height);\r\n            this.setScaled(false);\r\n        }\r\n    };\r\n    return ImageLocal;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://proyectoscanner/./dist/src/ImageLocal.js?");

/***/ }),

/***/ "./dist/src/ImageType.js":
/*!*******************************!*\
  !*** ./dist/src/ImageType.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ImageType\": () => (/* binding */ ImageType)\n/* harmony export */ });\nvar ImageType = /** @class */ (function () {\r\n    /**  Constructor general\r\n     * @img es un objeto tipo HTMLImageElement del cual se extrae el tamaño de la imagen\r\n     * @sc es el elemento Canvas de donde se ha dibujado la img\r\n    */\r\n    function ImageType(sc, img, w, h, data) {\r\n        if (img) {\r\n            this._width = img.width;\r\n            this._height = img.height;\r\n        }\r\n        else {\r\n            this._width = w;\r\n            this._height = h;\r\n        }\r\n        this.screenCanvas = sc;\r\n        this.imageData = sc.getImageData(0, 0, this._width, this._height);\r\n        this.initArray();\r\n        if (!data)\r\n            this.dataToImageArray2D();\r\n        else\r\n            this.dataTextToImageArray2D();\r\n        /*this.dataToImageArray2D = this.dataToImageArray2D.bind(this);\r\n        this.imageArray2DtoData = this.imageArray2DtoData.bind(this);*/\r\n    }\r\n    /** Metodo que devuelve las coordenas del array unidimensional de datos de la imagen */\r\n    ImageType.prototype.getColorIndicesForCoord = function (x, y) {\r\n        var red = y * (this._width * 4) + x * 4;\r\n        return [red, red + 1, red + 2, red + 3];\r\n    };\r\n    /** Convierte la data de la imagen a un arreglo tridimensional de manera que que queda asi:\r\n     * img[canalDeColor][anchoImg][altoImg]\r\n     */\r\n    ImageType.prototype.dataToImageArray2D = function () {\r\n        var position;\r\n        for (var i = 0; i < this._height; i++) {\r\n            for (var j = 0; j < this._width; j++) {\r\n                position = this.getColorIndicesForCoord(j, i);\r\n                this.arrImage[0][i][j] = this.imageData.data[position[0]];\r\n                this.arrImage[1][i][j] = this.imageData.data[position[1]];\r\n                this.arrImage[2][i][j] = this.imageData.data[position[2]];\r\n            }\r\n        }\r\n        //return this.arrImage;\r\n    };\r\n    ImageType.prototype.dataTextToImageArray2D = function () {\r\n        var position;\r\n        for (var i = 0; i < this._height; i++) {\r\n            for (var j = 0; j < this._width; j++) {\r\n                position = this.getColorIndicesForCoord(j, i);\r\n                this.arrImage[0][i][j] = this.imageData.data[position[3]];\r\n                //this.arrImage[1][i][j] = this.imageData.data[position[1]];\r\n                //this.arrImage[2][i][j] = this.imageData.data[position[2]];\r\n            }\r\n        }\r\n        //return this.arrImage;\r\n    };\r\n    /** Covierte un arreglo 3d de la imagen a un objeto data, si el argumento existe se dibuja\r\n     * @sc elemento Canas donde se desa dibujar la data\r\n     */\r\n    ImageType.prototype.imageArray2DtoData = function (sc, arrImage) {\r\n        var position;\r\n        for (var i = 0; i < this._height; i++) {\r\n            for (var j = 0; j < this._width; j++) {\r\n                position = this.getColorIndicesForCoord(j, i);\r\n                this.imageData.data[position[0]] = arrImage[0][i][j];\r\n                this.imageData.data[position[1]] = arrImage[1][i][j];\r\n                this.imageData.data[position[2]] = arrImage[2][i][j];\r\n            }\r\n        }\r\n        sc.putImageData(this.imageData, 0, 0);\r\n    };\r\n    /**\r\n     * Funcion que reescala los valores dew la imagen a el rango de una imagen de 0 - 255,\r\n     * la imagen puede estar en cualrquier rango de nunmeros reales.\r\n     * @param arrImage arrar of data\r\n     * @param alto image heigh\r\n     * @param ancho image width\r\n     */\r\n    ImageType.prototype.imageArray2DtoDataWithResizing = function (sc, arrImage) {\r\n        //variable donde guardamos la salida\r\n        //var sal: number[][][] = this.initArray(ancho, alto);\r\n        var max, min, factor;\r\n        max = arrImage[0][0][0];\r\n        min = arrImage[0][0][0];\r\n        var position;\r\n        for (var i = 0; i < this._height; i++) {\r\n            for (var j = 0; j < this._width; j++) {\r\n                max = Math.max(max, arrImage[0][i][j]);\r\n                min = Math.min(min, arrImage[0][i][j]);\r\n            }\r\n        }\r\n        factor = 255.0 / (max - min);\r\n        console.log(factor, max, min);\r\n        for (var i = 0; i < this._height; i++) {\r\n            for (var j = 0; j < this._width; j++) {\r\n                position = this.getColorIndicesForCoord(j, i);\r\n                this.imageData.data[position[0]] = Math.floor(factor * (arrImage[0][i][j] - min));\r\n                this.imageData.data[position[1]] = Math.floor(factor * (arrImage[1][i][j] - min));\r\n                this.imageData.data[position[2]] = Math.floor(factor * (arrImage[2][i][j] - min));\r\n            }\r\n        }\r\n        sc.putImageData(this.imageData, 0, 0);\r\n    };\r\n    ImageType.prototype.initArray = function () {\r\n        this.arrImage = new Array(3);\r\n        this.arrImage[0] = new Array(this._height);\r\n        this.arrImage[1] = new Array(this._height);\r\n        this.arrImage[2] = new Array(this._height);\r\n        for (var i = 0; i < this._height; i++) {\r\n            this.arrImage[0][i] = new Array(this._width);\r\n            this.arrImage[1][i] = new Array(this._width);\r\n            this.arrImage[2][i] = new Array(this._width);\r\n        }\r\n    };\r\n    ImageType.prototype.getArrayImg = function () {\r\n        return this.arrImage;\r\n    };\r\n    ImageType.prototype.getWidth = function () {\r\n        return this._width;\r\n    };\r\n    ImageType.prototype.getHeight = function () {\r\n        return this._height;\r\n    };\r\n    return ImageType;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://proyectoscanner/./dist/src/ImageType.js?");

/***/ }),

/***/ "./dist/src/MathImg.js":
/*!*****************************!*\
  !*** ./dist/src/MathImg.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MathImg\": () => (/* binding */ MathImg)\n/* harmony export */ });\n/* harmony import */ var _felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @felipeaamacedo/matrix-ts */ \"./node_modules/@felipeaamacedo/matrix-ts/lib/index.js\");\n/* harmony import */ var _felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\r\n\r\nvar MathImg = /** @class */ (function () {\r\n    function MathImg() {\r\n    }\r\n    MathImg.initArray = function (width, height) {\r\n        var arrImage = new Array(3);\r\n        arrImage[0] = new Array(height);\r\n        arrImage[1] = new Array(height);\r\n        arrImage[2] = new Array(height);\r\n        for (var i = 0; i < height; i++) {\r\n            arrImage[0][i] = new Array(width);\r\n            arrImage[1][i] = new Array(width);\r\n            arrImage[2][i] = new Array(width);\r\n        }\r\n        return arrImage;\r\n    };\r\n    MathImg.initArray2D = function (width, height) {\r\n        var arrImage = new Array(2);\r\n        arrImage[0] = new Array(height);\r\n        arrImage[1] = new Array(height);\r\n        for (var i = 0; i < height; i++) {\r\n            arrImage[0][i] = new Array(width);\r\n            arrImage[1][i] = new Array(width);\r\n        }\r\n        return arrImage;\r\n    };\r\n    MathImg.toGray = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var prom;\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                prom = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\r\n                sal[0][i][j] = prom;\r\n                sal[1][i][j] = prom;\r\n                sal[2][i][j] = prom;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toNegative = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = Math.pow(arrImage[0][i][j], 2);\r\n                sal[1][i][j] = Math.pow(arrImage[1][i][j], 2);\r\n                sal[2][i][j] = Math.pow(arrImage[2][i][j], 2);\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toRed = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = arrImage[0][i][j];\r\n                sal[1][i][j] = 0;\r\n                sal[2][i][j] = 0;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toGreen = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = 0;\r\n                sal[1][i][j] = arrImage[1][i][j];\r\n                sal[2][i][j] = 0;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toBlue = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = 0;\r\n                sal[1][i][j] = 0;\r\n                sal[2][i][j] = arrImage[2][i][j];\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.correctionGamma = function (img, factores) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = this.funcionGamma(arrImage[0][i][j], factores[0]);\r\n                sal[1][i][j] = this.funcionGamma(arrImage[1][i][j], factores[1]);\r\n                sal[2][i][j] = this.funcionGamma(arrImage[2][i][j], factores[2]);\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.funcionGamma = function (pixel, factor) {\r\n        return Math.min(255 * Math.pow(pixel / 250, factor), 255);\r\n    };\r\n    MathImg.toUmbral = function (img, umbral) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var prom;\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                prom = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\r\n                sal[0][i][j] = prom > umbral ? 255 : 0;\r\n                sal[1][i][j] = prom > umbral ? 255 : 0;\r\n                sal[2][i][j] = prom > umbral ? 255 : 0;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toDesfaceX = function (img, des) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var fila = arrImage[0].length, cols = arrImage[0][0].length;\r\n        for (var i = 0; i < fila; i++) {\r\n            for (var j = 0; j < cols; j++) {\r\n                sal[1][i][j] = arrImage[1][i][j];\r\n                if ((j - des) >= 0) {\r\n                    sal[0][i][j] = arrImage[0][i][j - des];\r\n                }\r\n                else {\r\n                    sal[0][i][j] = arrImage[0][i][j];\r\n                }\r\n                if ((j + des) < cols) {\r\n                    sal[2][i][j] = arrImage[2][i][j + des];\r\n                }\r\n                else {\r\n                    sal[2][i][j] = arrImage[2][i][j];\r\n                }\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toDesfaceY = function (img, desy) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var fila = arrImage[0].length, cols = arrImage[0][0].length;\r\n        for (var i = 0; i < fila; i++) {\r\n            for (var j = 0; j < cols; j++) {\r\n                sal[1][i][j] = arrImage[1][i][j];\r\n                if ((i - desy) >= 0) {\r\n                    sal[0][i][j] = arrImage[0][i - desy][j];\r\n                }\r\n                else {\r\n                    sal[0][i][j] = arrImage[0][i][j];\r\n                }\r\n                if ((i + desy) < fila) {\r\n                    sal[2][i][j] = arrImage[2][i + desy][j];\r\n                }\r\n                else {\r\n                    sal[2][i][j] = arrImage[2][i][j];\r\n                }\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toUmbral2limites = function (img, rangos) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var fila = arrImage[0].length, cols = arrImage[0][0].length;\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var rangoMin = rangos[0];\r\n        var rangoMax = rangos[1];\r\n        var prome;\r\n        for (var i = 0; i < fila; i++) {\r\n            for (var j = 0; j < cols; j++) {\r\n                prome = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\r\n                if (prome <= rangoMin && prome >= rangoMax) {\r\n                    sal[0][i][j] = 250;\r\n                }\r\n                else\r\n                    sal[0][i][j] = 0;\r\n                if (prome <= rangoMin && prome >= rangoMax) {\r\n                    sal[1][i][j] = 250;\r\n                }\r\n                else\r\n                    sal[1][i][j] = 0;\r\n                if (prome <= rangoMin && prome >= rangoMax) {\r\n                    sal[2][i][j] = 250;\r\n                }\r\n                else\r\n                    sal[2][i][j] = 0;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.changeBrightness = function (img, factor) {\r\n        var arrImage = img.getArrayImg();\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = arrImage[0][i][j] * factor > 255.0 ? 255.0 : arrImage[0][i][j] * factor;\r\n                sal[1][i][j] = arrImage[1][i][j] * factor > 255.0 ? 255.0 : arrImage[1][i][j] * factor;\r\n                sal[2][i][j] = arrImage[2][i][j] * factor > 255.0 ? 255.0 : arrImage[2][i][j] * factor;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.relativeBrightness = function (img) {\r\n        var arrImage = img.getArrayImg();\r\n        var sal = this.initArray2D(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                //si el valor del pixel > umbral, entoncesa calculo el brillo\r\n                //si no el brillo =0\r\n                sal[0][i][j] = Math.sqrt(Math.pow(arrImage[0][i][j], 2) * 0.299 +\r\n                    Math.pow(arrImage[1][i][j], 2) * 0.587 +\r\n                    Math.pow(arrImage[2][i][j], 2) * 0.114) / 100.0;\r\n                sal[1][i][j] = 'rgb(' + arrImage[0][i][j] + ',' + arrImage[1][i][j] + ',' + arrImage[2][i][j] + ')';\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.colorGradienteX = function (img, factores) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var prom;\r\n        var r1, r2, b1, b2, g1, g2;\r\n        var dr, dg, db, dir;\r\n        r1 = factores[0];\r\n        g1 = factores[1];\r\n        b1 = factores[2];\r\n        r2 = factores[3];\r\n        g2 = factores[4];\r\n        b2 = factores[5];\r\n        dr = (r2 - r1) / img.getWidth();\r\n        dg = (g2 - g1) / img.getWidth();\r\n        db = (b2 - b1) / img.getWidth();\r\n        for (var j = 0; j < img.getWidth(); j++) {\r\n            for (var i = 0; i < img.getHeight(); i++) {\r\n                prom = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\r\n                sal[0][i][j] = Math.floor(prom * r1 / 255);\r\n                sal[1][i][j] = Math.floor(prom * g1 / 255);\r\n                sal[2][i][j] = Math.floor(prom * b1 / 255);\r\n            }\r\n            r1 += dr;\r\n            g1 += dg;\r\n            b1 += db;\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.colorGradientY = function (img, factores) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var prom;\r\n        var r1, r2, b1, b2, g1, g2;\r\n        var dr, dg, db;\r\n        r1 = factores[0];\r\n        g1 = factores[1];\r\n        b1 = factores[2];\r\n        r2 = factores[3];\r\n        g2 = factores[4];\r\n        b2 = factores[5];\r\n        dr = (r2 - r1) / img.getHeight();\r\n        dg = (g2 - g1) / img.getHeight();\r\n        db = (b2 - b1) / img.getHeight();\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                prom = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\r\n                sal[0][i][j] = Math.floor(prom * r1 / 255);\r\n                sal[1][i][j] = Math.floor(prom * g1 / 255);\r\n                sal[2][i][j] = Math.floor(prom * b1 / 255);\r\n            }\r\n            r1 += dr;\r\n            g1 += dg;\r\n            b1 += db;\r\n        }\r\n        return sal;\r\n    };\r\n    /**\r\n     * Metodo para Generar el contraste de una Imagen\r\n     * @img  ImageType tipo de imagen donde se guarda una matriz tridimencional\r\n     * @return number[][][] es la imagen de salida con contraste\r\n     */\r\n    MathImg.changeContraste = function (img, valor) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        //\r\n        var cR, cG, cB;\r\n        var contraste;\r\n        contraste = (valor + 100) / 100;\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                cR = ((((arrImage[0][i][j] / 255.0) - 0.5) * contraste) + 0.5) * 255.0;\r\n                if (cR > 255)\r\n                    cR = 255;\r\n                if (cR < 0)\r\n                    cR = 0;\r\n                sal[0][i][j] = cR;\r\n                cG = ((((arrImage[1][i][j] / 255.0) - 0.5) * contraste) + 0.5) * 255.0;\r\n                if (cG > 255)\r\n                    cG = 255;\r\n                if (cG < 0)\r\n                    cG = 0;\r\n                sal[1][i][j] = cG;\r\n                cB = ((((arrImage[2][i][j] / 255.0) - 0.5) * contraste) + 0.5) * 255.0;\r\n                if (cB > 255)\r\n                    cB = 255;\r\n                if (cB < 0)\r\n                    cB = 0;\r\n                sal[2][i][j] = cB;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.pow = function (img, power) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = Math.pow(arrImage[0][i][j], power);\r\n                sal[1][i][j] = Math.pow(arrImage[1][i][j], power);\r\n                sal[2][i][j] = Math.pow(arrImage[2][i][j], power);\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toCos = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = Math.cos(arrImage[0][i][j]);\r\n                sal[1][i][j] = Math.cos(arrImage[1][i][j]);\r\n                sal[2][i][j] = Math.cos(arrImage[2][i][j]);\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toSubtract = function (img, escalar) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = arrImage[0][i][j] - escalar;\r\n                sal[1][i][j] = arrImage[1][i][j] - escalar;\r\n                sal[2][i][j] = arrImage[2][i][j] - escalar;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toMultiplication = function (img, valor) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = valor * arrImage[0][i][j];\r\n                sal[1][i][j] = valor * arrImage[1][i][j];\r\n                sal[2][i][j] = valor * arrImage[2][i][j];\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toSine = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = Math.sin(arrImage[0][i][j]);\r\n                sal[1][i][j] = Math.sin(arrImage[1][i][j]);\r\n                sal[2][i][j] = Math.sin(arrImage[2][i][j]);\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toAdd = function (img, sumar) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = arrImage[0][i][j] + sumar;\r\n                sal[1][i][j] = arrImage[1][i][j] + sumar;\r\n                sal[2][i][j] = arrImage[2][i][j] + sumar;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toDividir = function (img, dividir) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = arrImage[0][i][j] + dividir;\r\n                sal[1][i][j] = arrImage[1][i][j] + dividir;\r\n                sal[2][i][j] = arrImage[2][i][j] + dividir;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toSqrt = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = Math.sqrt(arrImage[0][i][j]);\r\n                sal[1][i][j] = Math.sqrt(arrImage[1][i][j]);\r\n                sal[2][i][j] = Math.sqrt(arrImage[2][i][j]);\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toTan = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = Math.tan(arrImage[0][i][j]);\r\n                sal[1][i][j] = Math.tan(arrImage[1][i][j]);\r\n                sal[2][i][j] = Math.tan(arrImage[2][i][j]);\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.addImg = function (img, img2) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        var arrImage2 = img2.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = arrImage[0][i][j] + arrImage2[0][i][j];\r\n                sal[1][i][j] = arrImage[1][i][j] + arrImage2[1][i][j];\r\n                sal[2][i][j] = arrImage[2][i][j] + arrImage2[2][i][j];\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.hist = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = new Array(3);\r\n        sal[0] = new Array(256);\r\n        sal[1] = new Array(256);\r\n        sal[2] = new Array(256);\r\n        for (var i = 0; i < 256; i++) {\r\n            sal[0][i] = 0;\r\n            sal[1][i] = 0;\r\n            sal[2][i] = 0;\r\n        }\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][arrImage[0][i][j]]++;\r\n                sal[1][arrImage[1][i][j]]++;\r\n                sal[2][arrImage[2][i][j]]++;\r\n            }\r\n        }\r\n        //console.log(sal[0])\r\n        return sal;\r\n    };\r\n    MathImg.histAcum = function (h) {\r\n        //variable donde guardamos la salida\r\n        var hist = new Array(3);\r\n        hist[0] = new Array(256);\r\n        hist[1] = new Array(256);\r\n        hist[2] = new Array(256);\r\n        hist[0][0] = h[0][0];\r\n        hist[1][0] = h[1][0];\r\n        hist[2][0] = h[2][0];\r\n        for (var i = 1; i < h[0].length; i++) {\r\n            hist[0][i] = hist[0][i - 1] + h[0][i];\r\n            hist[1][i] = hist[1][i - 1] + h[1][i];\r\n            hist[2][i] = hist[2][i - 1] + h[2][i];\r\n            //if(i==255)\r\n        }\r\n        return hist;\r\n    };\r\n    MathImg.ecualizar = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var h = this.hist(img);\r\n        var hA = this.histAcum(h);\r\n        var fT;\r\n        fT = new Array(3);\r\n        fT[0] = new Array(256);\r\n        fT[2] = new Array(256);\r\n        fT[1] = new Array(256);\r\n        for (var i = 0; i < 256; i++) {\r\n            fT[0][i] = Math.floor(hA[0][i] * 255.0 / hA[0][255]);\r\n            fT[1][i] = Math.floor(hA[1][i] * 255.0 / hA[1][255]);\r\n            fT[2][i] = Math.floor(hA[2][i] * 255.0 / hA[2][254]);\r\n        }\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = fT[0][arrImage[0][i][j]];\r\n                sal[1][i][j] = fT[1][arrImage[1][i][j]];\r\n                sal[2][i][j] = fT[2][arrImage[2][i][j]];\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.erosionar = function (img, vec8) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = 0;\r\n                sal[1][i][j] = 0;\r\n                sal[2][i][j] = 0;\r\n            }\r\n        }\r\n        var vecinos, valorComp = 4;\r\n        if (vec8)\r\n            valorComp = 8;\r\n        for (var i = 1; i < img.getHeight() - 1; i++) {\r\n            for (var j = 1; j < img.getWidth() - 1; j++) {\r\n                vecinos = 0;\r\n                vecinos += arrImage[0][i + 1][j] ? 1 : 0;\r\n                vecinos += arrImage[0][i - 1][j] ? 1 : 0;\r\n                vecinos += arrImage[0][i][j + 1] ? 1 : 0;\r\n                vecinos += arrImage[0][i][j - 1] ? 1 : 0;\r\n                if (vec8) {\r\n                    vecinos += arrImage[0][i + 1][j - 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i + 1][j + 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i - 1][j + 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i - 1][j - 1] ? 1 : 0;\r\n                }\r\n                if (arrImage[0][i][j] && vecinos == valorComp) {\r\n                    sal[0][i][j] = 255;\r\n                    sal[1][i][j] = 255;\r\n                    sal[2][i][j] = 255;\r\n                }\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.dilatar = function (img, vec8) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                sal[0][i][j] = 0;\r\n                sal[1][i][j] = 0;\r\n                sal[2][i][j] = 0;\r\n            }\r\n        }\r\n        var vecinos, valorComp = 4;\r\n        if (vec8)\r\n            valorComp = 8;\r\n        for (var i = 1; i < img.getHeight() - 1; i++) {\r\n            for (var j = 1; j < img.getWidth() - 1; j++) {\r\n                vecinos = 0;\r\n                vecinos += arrImage[0][i + 1][j] ? 1 : 0;\r\n                vecinos += arrImage[0][i - 1][j] ? 1 : 0;\r\n                vecinos += arrImage[0][i][j + 1] ? 1 : 0;\r\n                vecinos += arrImage[0][i][j - 1] ? 1 : 0;\r\n                if (vec8) {\r\n                    vecinos += arrImage[0][i + 1][j - 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i + 1][j + 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i - 1][j + 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i - 1][j - 1] ? 1 : 0;\r\n                }\r\n                if (arrImage[0][i][j] && vecinos) {\r\n                    sal[0][i][j] = 255;\r\n                    sal[1][i][j] = 255;\r\n                    sal[2][i][j] = 255;\r\n                }\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.apertura = function (img, vec8) {\r\n        var arrImage = this.erosionar(img, vec8);\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var vecinos, valorComp = 4;\r\n        if (vec8)\r\n            valorComp = 8;\r\n        for (var i = 1; i < img.getHeight() - 1; i++) {\r\n            for (var j = 1; j < img.getWidth() - 1; j++) {\r\n                vecinos = 0;\r\n                vecinos += arrImage[0][i + 1][j] ? 1 : 0;\r\n                vecinos += arrImage[0][i - 1][j] ? 1 : 0;\r\n                vecinos += arrImage[0][i][j + 1] ? 1 : 0;\r\n                vecinos += arrImage[0][i][j - 1] ? 1 : 0;\r\n                if (vec8) {\r\n                    vecinos += arrImage[0][i + 1][j - 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i + 1][j + 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i - 1][j + 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i - 1][j - 1] ? 1 : 0;\r\n                }\r\n                if (arrImage[0][i][j] && vecinos) {\r\n                    sal[0][i][j] = 255;\r\n                    sal[1][i][j] = 255;\r\n                    sal[2][i][j] = 255;\r\n                }\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.cierre = function (img, vec8) {\r\n        var arrImage = this.dilatar(img, vec8);\r\n        var vecinos, valorComp = 4;\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        if (vec8)\r\n            valorComp = 8;\r\n        for (var i = 1; i < img.getHeight() - 1; i++) {\r\n            for (var j = 1; j < img.getWidth() - 1; j++) {\r\n                vecinos = 0;\r\n                vecinos += arrImage[0][i + 1][j] ? 1 : 0;\r\n                vecinos += arrImage[0][i - 1][j] ? 1 : 0;\r\n                vecinos += arrImage[0][i][j + 1] ? 1 : 0;\r\n                vecinos += arrImage[0][i][j - 1] ? 1 : 0;\r\n                if (vec8) {\r\n                    vecinos += arrImage[0][i + 1][j - 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i + 1][j + 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i - 1][j + 1] ? 1 : 0;\r\n                    vecinos += arrImage[0][i - 1][j - 1] ? 1 : 0;\r\n                }\r\n                if (arrImage[0][i][j] && vecinos == valorComp) {\r\n                    sal[0][i][j] = 255;\r\n                    sal[1][i][j] = 255;\r\n                    sal[2][i][j] = 255;\r\n                }\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.fromRGBtoHSI = function (img) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var hue;\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                arrImage[0][i][j] /= 255.0;\r\n                arrImage[1][i][j] /= 255.0;\r\n                arrImage[2][i][j] /= 255.0;\r\n                hue = 180 / Math.PI * Math.acos(0.5 * ((arrImage[0][i][j] - arrImage[1][i][j]) + (arrImage[0][i][j] - arrImage[2][i][j])) /\r\n                    Math.sqrt(Math.pow(arrImage[0][i][j] - arrImage[1][i][j], 2) + (arrImage[0][i][j] - arrImage[2][i][j]) * (arrImage[1][i][j] - arrImage[2][i][j])));\r\n                sal[0][i][j] = arrImage[2][i][j] > arrImage[1][i][j] ? 360 - hue : hue;\r\n                sal[1][i][j] = 1 - (3 * Math.min(arrImage[0][i][j], arrImage[1][i][j], arrImage[2][i][j])) / (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]);\r\n                sal[2][i][j] = (arrImage[0][i][j] + arrImage[1][i][j] + arrImage[2][i][j]) / 3;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.fromHSItoRGB = function (arrImage) {\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var width;\r\n        var height;\r\n        height = arrImage[0].length;\r\n        width = arrImage[0][0].length;\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(width, height);\r\n        var hue;\r\n        for (var i = 0; i < height; i++) {\r\n            for (var j = 0; j < width; j++) {\r\n                //H de 0 - 120\r\n                if (arrImage[0][i][j] >= 0 && arrImage[0][i][j] < 120) {\r\n                    sal[0][i][j] = arrImage[2][i][j] * (1 + (arrImage[1][i][j] * Math.cos(this.toRad(arrImage[0][i][j]))) /\r\n                        (Math.cos(this.toRad(60 - arrImage[0][i][j]))));\r\n                    sal[2][i][j] = arrImage[2][i][j] * (1 - arrImage[1][i][j]);\r\n                    sal[1][i][j] = 3 * arrImage[2][i][j] - sal[0][i][j] - sal[2][i][j];\r\n                }\r\n                else if (arrImage[0][i][j] >= 120 && arrImage[0][i][j] < 240) {\r\n                    sal[0][i][j] = arrImage[2][i][j] * (1 - arrImage[1][i][j]);\r\n                    sal[1][i][j] = arrImage[2][i][j] * (1 + (arrImage[1][i][j] * Math.cos(this.toRad(arrImage[0][i][j] - 120))) /\r\n                        (Math.cos(this.toRad(180 - arrImage[0][i][j]))));\r\n                    sal[2][i][j] = 3 * arrImage[2][i][j] - sal[0][i][j] - sal[1][i][j];\r\n                }\r\n                else if (arrImage[0][i][j] >= 240 && arrImage[0][i][j] < 360) {\r\n                    sal[1][i][j] = arrImage[2][i][j] * (1 - arrImage[1][i][j]);\r\n                    sal[2][i][j] = arrImage[2][i][j] * (1 + (arrImage[1][i][j] * Math.cos(this.toRad(arrImage[0][i][j] - 240))) /\r\n                        (Math.cos(this.toRad(300 - arrImage[0][i][j]))));\r\n                    sal[0][i][j] = 3 * arrImage[2][i][j] - sal[1][i][j] - sal[2][i][j];\r\n                }\r\n                sal[0][i][j] *= 255.0;\r\n                sal[1][i][j] *= 255.0;\r\n                sal[2][i][j] *= 255.0;\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.toRad = function (grados) {\r\n        return (grados * Math.PI / 180);\r\n    };\r\n    MathImg.falseColorByHue = function (arrImage, hue, newHue) {\r\n        var width;\r\n        var height;\r\n        height = arrImage[0].length;\r\n        width = arrImage[0][0].length;\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(width, height);\r\n        var range = 25;\r\n        for (var i = 0; i < height; i++) {\r\n            for (var j = 0; j < width; j++) {\r\n                //si hue es menor a cero estamos en el rango de 360 bajos, por lo que hay que revisar esos valores\r\n                if ((hue - range) < 0) {\r\n                    if (Math.abs(hue - arrImage[0][i][j]) < range) {\r\n                        sal[0][i][j] = newHue;\r\n                    }\r\n                    else if ((360 + hue - arrImage[0][i][j]) < range) {\r\n                        sal[0][i][j] = newHue;\r\n                    }\r\n                    else {\r\n                        sal[0][i][j] = arrImage[0][i][j];\r\n                    }\r\n                }\r\n                else if ((hue + range) > 360) {\r\n                    if (Math.abs(hue - arrImage[0][i][j]) < range) {\r\n                        sal[0][i][j] = newHue;\r\n                    }\r\n                    else if ((-360 + hue - arrImage[0][i][j]) < range) {\r\n                        sal[0][i][j] = newHue;\r\n                    }\r\n                    else {\r\n                        sal[0][i][j] = arrImage[0][i][j];\r\n                    }\r\n                } // si no se rebasa del cero\r\n                else if (Math.abs(hue - arrImage[0][i][j]) < range) {\r\n                    sal[0][i][j] = newHue;\r\n                } // si no se rebasa del rango\r\n                else {\r\n                    sal[0][i][j] = arrImage[0][i][j];\r\n                }\r\n                sal[1][i][j] = arrImage[1][i][j];\r\n                sal[2][i][j] = arrImage[2][i][j];\r\n            }\r\n        }\r\n        return sal;\r\n    };\r\n    MathImg.conX = function (i, j, cs) {\r\n        //let res = cs.data[0][0] * j + cs.data[1][0] * i + cs.data[3][0] * i * j + cs.data[3][0];\r\n        // console.log(i,j);\r\n        // console.log(cs.data[0][0], cs.data[1][0], cs.data[2][0],cs.data[3][0] );\r\n        //console.log(cs.data[0][1]* i );\r\n        return Math.floor(cs.data[0][0] * j + cs.data[1][0] * i + cs.data[2][0] * i * j + cs.data[3][0]);\r\n    };\r\n    /*public static conY(i:number,j : number, cs: Matrix){\r\n    return Math.floor(cs.data[1][0] * j + cs.data[1][1] * i + cs.data[1][2]*i*j + cs.data[1][3]);\r\n  }*/\r\n    //aqui va ir el codigo de la trasnformacion bilineal  \r\n    MathImg.bilineal = function (img, puntos_a, puntos_b) {\r\n        //console.log(puntos_a);\r\n        /* console.log(puntos_a[0]);\r\n         console.log(puntos_a[1]);\r\n         console.log(puntos_a[2]);\r\n         console.log(puntos_a[3]);*/\r\n        //variable que guarda el arreglo 3d de la imagen de color\r\n        var arrImage = img.getArrayImg();\r\n        //variable donde guardamos la salida\r\n        var sal = this.initArray(img.getWidth(), img.getHeight());\r\n        var x1a = 0, y1a = 0, x2a = img.getWidth() - 1, y2a = 0, x3a = img.getWidth() - 1, y3a = img.getHeight() - 1, x4a = 0, y4a = img.getHeight() - 1;\r\n        var x1r = puntos_a[0], y1r = puntos_b[0], x2r = puntos_a[1], y2r = puntos_b[1], x3r = puntos_a[2], y3r = puntos_b[2], x4r = puntos_a[3], y4r = puntos_b[3];\r\n        console.log(y1r);\r\n        console.log(x2r);\r\n        console.log(y2r);\r\n        console.log(x3r);\r\n        console.log(y3r);\r\n        console.log(x4r);\r\n        console.log(y4r);\r\n        var matA = new _felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__.Matrix(4, 4);\r\n        matA.data = [\r\n            [x1a, y1a, x1a * y1a, 1],\r\n            [x2a, y2a, x2a * y2a, 1],\r\n            [x3a, y3a, x3a * y3a, 1],\r\n            [x4a, y4a, x4a * y4a, 1]\r\n        ];\r\n        var vecX = new _felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__.Matrix(4, 1);\r\n        vecX.data = [\r\n            [x1r],\r\n            [x2r],\r\n            [x3r],\r\n            [x4r]\r\n        ];\r\n        var vecY = new _felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__.Matrix(4, 1);\r\n        vecY.data = [\r\n            [y1r],\r\n            [y2r],\r\n            [y3r],\r\n            [y4r]\r\n        ];\r\n        var C1 = (0,_felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__.multiply)((0,_felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__.inv)(matA), vecX);\r\n        var C2 = (0,_felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__.multiply)((0,_felipeaamacedo_matrix_ts__WEBPACK_IMPORTED_MODULE_0__.inv)(matA), vecY);\r\n        var posi, posj;\r\n        //float coef[][] = matrizDeC(xd0, yd0, xd1, yd1, xd2, yd2, xSI,ySI, xSD, ySD, xII, yII );\r\n        for (var i = 0; i < img.getHeight(); i++) {\r\n            for (var j = 0; j < img.getWidth(); j++) {\r\n                posj = this.conX(i, j, C1);\r\n                posi = this.conX(i, j, C2);\r\n                if ((posj >= 0 && posj <= img.getWidth() - 1) && (posi >= 0 && posi <= img.getHeight() - 1)) {\r\n                    sal[0][i][j] = arrImage[0][posi][posj];\r\n                    sal[1][i][j] = arrImage[1][posi][posj];\r\n                    sal[2][i][j] = arrImage[2][posi][posj];\r\n                }\r\n            }\r\n        }\r\n        //console.log(\"Transformacion bilineal en proceso\");\r\n        console.log(sal);\r\n        return sal;\r\n    };\r\n    return MathImg;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://proyectoscanner/./dist/src/MathImg.js?");

/***/ }),

/***/ "./dist/src/canvasLocal.js":
/*!*********************************!*\
  !*** ./dist/src/canvasLocal.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CanvasLocal\": () => (/* binding */ CanvasLocal)\n/* harmony export */ });\nvar CanvasLocal = /** @class */ (function () {\r\n    function CanvasLocal(g, canvas, h) {\r\n        this.graphics = g;\r\n        this.rWidth = 12;\r\n        this.rHeight = 12;\r\n        this.maxX = canvas.width - 1;\r\n        this.maxY = canvas.height - 1;\r\n        this.pixelSize = Math.max(this.rWidth / this.maxX, this.rHeight / this.maxY);\r\n        this.centerX = this.maxX / 12;\r\n        this.centerY = this.maxY / 12 * 10;\r\n        this.hist = h;\r\n    }\r\n    CanvasLocal.prototype.iX = function (x) { return Math.round(this.centerX + x / this.pixelSize); };\r\n    CanvasLocal.prototype.iY = function (y) { return Math.round(this.centerY - y / this.pixelSize); };\r\n    CanvasLocal.prototype.drawLine = function (x1, y1, x2, y2) {\r\n        this.graphics.beginPath();\r\n        this.graphics.moveTo(x1, y1);\r\n        this.graphics.lineTo(x2, y2);\r\n        this.graphics.closePath();\r\n        this.graphics.stroke();\r\n    };\r\n    CanvasLocal.prototype.drawRmboide = function (x1, y1, x2, y2, x3, y3, x4, y4, color) {\r\n        // Color de relleno\r\n        this.graphics.fillStyle = color;\r\n        // Comenzamos la ruta de dibujo, o path\r\n        this.graphics.beginPath();\r\n        // Mover a la esquina superior izquierda\r\n        this.graphics.moveTo(x1, y1);\r\n        // Dibujar la línea hacia la derecha\r\n        this.graphics.lineTo(x2, y2);\r\n        // Ahora la que va hacia abajo\r\n        this.graphics.lineTo(x3, y3); // A 80 porque esa es la altura\r\n        // La que va hacia la izquierda\r\n        this.graphics.lineTo(x4, y4);\r\n        // Y dejamos que la última línea la dibuje JS\r\n        this.graphics.closePath();\r\n        // Hacemos que se dibuje\r\n        this.graphics.stroke();\r\n        // Lo rellenamos\r\n        this.graphics.fill();\r\n    };\r\n    CanvasLocal.prototype.fx = function (x) {\r\n        return Math.sin(x * 2.5);\r\n    };\r\n    CanvasLocal.prototype.paint = function () {\r\n        var max = this.maxHist();\r\n        var factor = 6 / max;\r\n        this.drawLine(this.iX(0), this.iY(0), this.iX(10), this.iY(0));\r\n        this.drawLine(this.iX(0), this.iY(0), this.iX(0), this.iY(8));\r\n        this.graphics.strokeStyle = 'red';\r\n        for (var i = 0; i < 254; i++) {\r\n            this.drawLine(this.iX(i / 25), this.iY(this.hist[0][i] * factor), this.iX((i + 1) / 25), this.iY(this.hist[0][i + 1] * factor));\r\n        }\r\n        this.graphics.strokeStyle = 'green';\r\n        for (var i = 0; i < 254; i++) {\r\n            this.drawLine(this.iX(i / 25), this.iY(this.hist[1][i] * factor), this.iX((i + 1) / 25), this.iY(this.hist[1][i + 1] * factor));\r\n        }\r\n        this.graphics.strokeStyle = 'blue';\r\n        for (var i = 0; i < 254; i++) {\r\n            this.drawLine(this.iX(i / 25), this.iY(this.hist[2][i] * factor), this.iX((i + 1) / 25), this.iY(this.hist[2][i + 1] * factor));\r\n        }\r\n        /*this.graphics.strokeStyle = 'black';\r\n        this.drawLine(this.iX(0), this.iY(0), this.iX(8), this.iY(0));\r\n        this.drawLine(this.iX(0), this.iY(0), this.iX(0), this.iY(6));\r\n        \r\n       */\r\n    };\r\n    CanvasLocal.prototype.maxHist = function () {\r\n        var max = this.hist[0][0];\r\n        for (var i = 0; i < 255; i++) {\r\n            if (this.hist[0][i] > max)\r\n                max = this.hist[0][i];\r\n        }\r\n        return max;\r\n    };\r\n    return CanvasLocal;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://proyectoscanner/./dist/src/canvasLocal.js?");

/***/ }),

/***/ "./dist/src/index.js":
/*!***************************!*\
  !*** ./dist/src/index.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ImageLocal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ImageLocal.js */ \"./dist/src/ImageLocal.js\");\n/* harmony import */ var _ImageType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ImageType.js */ \"./dist/src/ImageType.js\");\n/* harmony import */ var _MathImg_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MathImg.js */ \"./dist/src/MathImg.js\");\n/* harmony import */ var _particle_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./particle.js */ \"./dist/src/particle.js\");\n/* harmony import */ var _canvasLocal_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./canvasLocal.js */ \"./dist/src/canvasLocal.js\");\n/* harmony import */ var _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DefaultSettings.js */ \"./dist/src/DefaultSettings.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar lienzo1;\r\nvar lienzo2;\r\nvar lienzo4;\r\nvar pantalla1;\r\nvar pantalla2;\r\nvar pantalla4;\r\nvar arr_Img = new Array(); //creo arreglo unidimensional para guardar las posiciones X\r\nvar posImgCv = -1;\r\n//let arr_numY = new Array();//creo arreglo unidimensional para guardar las posiciones Y\r\n//let numero1 : number=arr_numX.forEach(elemento,0);\r\n//let arr_numXY =[[arr_numX],[arr_numY]];//creo arreglo bidimensional para guardar las posiciones X y Y\r\nvar arrayX = [];\r\nvar arrayY = [];\r\n/* Este evento controla la forma de abrir un archivo mediante el evento de arrastrar y soltar */\r\nfunction handleDragOver(evt) {\r\n    evt.stopPropagation();\r\n    evt.preventDefault(); //que no se abra en otra ventana sola la imagen\r\n    evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\r\n}\r\n/** Variables que controla el canvas de la imagen, el primero\r\n * posteriormemte se volveran arreglos cuando ya controlemos las seis ventanas de nuestro frame\r\n*/\r\nlienzo1 = document.getElementById('img1');\r\npantalla1 = lienzo1.getContext(\"2d\");\r\nlienzo2 = document.getElementById('img2');\r\npantalla2 = lienzo2.getContext(\"2d\");\r\nlienzo4 = document.getElementById('img4');\r\npantalla4 = lienzo4.getContext(\"2d\");\r\nvar dropZone = lienzo1; //document.getElementById('img1');\r\nvar imgLocal = new _ImageLocal_js__WEBPACK_IMPORTED_MODULE_0__.ImageLocal(pantalla1);\r\nimgLocal.getImage().onload = imgLocal.onload;\r\nvar imgLocal4 = new _ImageLocal_js__WEBPACK_IMPORTED_MODULE_0__.ImageLocal(pantalla4);\r\nimgLocal4.getImage().onload = imgLocal4.onload;\r\nfunction convertirAGris(evt) {\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toGray(imagenSal));\r\n}\r\nfunction convertirANegativo(evt) {\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoDataWithResizing(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toNegative(imagenSal));\r\n}\r\nfunction convertirARojo(evt) {\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toRed(imagenSal));\r\n}\r\nfunction convertirAVerde(evt) {\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toGreen(imagenSal));\r\n}\r\nfunction convertirAAzul(evt) {\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toBlue(imagenSal));\r\n}\r\nfunction correccionGamma(evt) {\r\n    var args = prompt('Ingresa los factores de correccion Gamma, separados por coma');\r\n    var factores = args.split(',').map(function (elem) { return parseFloat(elem); });\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.correctionGamma(imagenSal, factores));\r\n}\r\nfunction umbralizado(evt) {\r\n    var args = prompt('Ingresa el valor del umbral');\r\n    var umbral = parseFloat(args);\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toUmbral(imagenSal, umbral));\r\n}\r\nfunction desfaseX(evt) {\r\n    var args = prompt('Ingresa el valor del desfase en X');\r\n    var des = parseFloat(args);\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toDesfaceX(imagenSal, des));\r\n}\r\nfunction desfaseY(evt) {\r\n    var args = prompt('Ingresa el valor del desfase en Y');\r\n    var desy = parseFloat(args);\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toDesfaceX(imagenSal, desy));\r\n}\r\nfunction umbral2limites(evt) {\r\n    var args = prompt('Ingresa el rango minimo y el maximo separado por comas');\r\n    var rangos = args.split(',').map(function (elem) { return parseFloat(elem); });\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toUmbral2limites(imagenSal, rangos));\r\n}\r\nfunction changeBrightness(evt) {\r\n    var factor = prompt(\"Ingresa un valor en el rango de 0-2, como un porcentaje\");\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.changeBrightness(imagenSal, parseFloat(factor)));\r\n}\r\nfunction colorGradienteX(evt) {\r\n    var args = prompt(\"Ingresa color de Inicio y final en formato r,g,b, separados por coma\");\r\n    var factores = args.split(',').map(function (elem) { return parseFloat(elem); });\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.colorGradienteX(imagenSal, factores));\r\n}\r\nfunction colorGradienteY(evt) {\r\n    var args = prompt(\"Ingresa color de Inicio y final en formato r,g,b, separados por coma\");\r\n    var factores = args.split(',').map(function (elem) { return parseFloat(elem); });\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.colorGradientY(imagenSal, factores));\r\n}\r\nfunction opchangeContraste(evt) {\r\n    var argss = prompt('Ingresa un valor entre el rango de -100 a 100');\r\n    var valor = parseFloat(argss);\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.changeContraste(imagenSal, valor));\r\n}\r\nfunction opgetPow(evt) {\r\n    var argss = prompt('Ingresa un numero ( potencia )');\r\n    var valor = parseFloat(argss);\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoDataWithResizing(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.pow(imagenSal, valor));\r\n}\r\nfunction coseno(evt) {\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoDataWithResizing(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toCos(imagenSal));\r\n}\r\nfunction multiplicacion(evt) {\r\n    var argss = prompt('Ingresa un numero real');\r\n    var valor = parseFloat(argss);\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toMultiplication(imagenSal, valor));\r\n}\r\nfunction subtract(evt) {\r\n    var argss = prompt('Ingresa un numero real');\r\n    var restar = parseFloat(argss);\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toSubtract(imagenSal, restar));\r\n}\r\nfunction funcionSine(evt) {\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoDataWithResizing(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toSine(imagenSal));\r\n}\r\nfunction add(evt) {\r\n    var argss = prompt('Ingresa un numero real');\r\n    var sumar = parseFloat(argss);\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toAdd(imagenSal, sumar));\r\n}\r\nfunction sqrt(evt) {\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoDataWithResizing(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toSqrt(imagenSal));\r\n}\r\nfunction div(evt) {\r\n    var argss = prompt('Ingresa un numero real');\r\n    var dividir = parseFloat(argss);\r\n    if (dividir == 0) {\r\n        var argss = prompt('Ingresa un valor diferente de 0');\r\n        var dividir = parseFloat(argss);\r\n        var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toDividir(imagenSal, dividir));\r\n    }\r\n    else {\r\n        var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toDividir(imagenSal, dividir));\r\n    }\r\n}\r\nfunction tan(evt) {\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoDataWithResizing(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.toTan(imagenSal));\r\n}\r\nfunction sumaImg(evt) {\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    var imagen2 = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla4, imgLocal4.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.addImg(imagenSal, imagen2));\r\n}\r\n//variables adicionales para el efecto rain\r\nvar ctx = pantalla2;\r\nvar w;\r\nvar h;\r\nvar numberOfParticles = 5000;\r\nvar particlesArray;\r\nparticlesArray = new Array(0);\r\nvar imagenSal;\r\nfunction init() {\r\n    //init\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    var tmp = _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.relativeBrightness(imagenSal);\r\n    w = imagenSal.getWidth();\r\n    h = imagenSal.getHeight();\r\n    for (var i = 0; i < numberOfParticles; i++) {\r\n        particlesArray.push(new _particle_js__WEBPACK_IMPORTED_MODULE_3__.Particle(w, h, ctx, tmp));\r\n    }\r\n}\r\nfunction animate() {\r\n    ctx.drawImage(imgLocal.getImage(), 0, 0, w, h);\r\n    ctx.globalAlpha = 0.25;\r\n    ctx.fillStyle = 'rgb(0,0,0)';\r\n    ctx.fillRect(0, 0, w, h);\r\n    for (var i = 0; i < particlesArray.length; i++) {\r\n        particlesArray[i].update();\r\n        particlesArray[i].draw();\r\n    }\r\n    requestAnimationFrame(animate);\r\n}\r\nfunction animate2() {\r\n    ctx.globalAlpha = 0.25;\r\n    ctx.fillStyle = 'rgb(0,0,0)';\r\n    ctx.fillRect(0, 0, w, h);\r\n    for (var i = 0; i < particlesArray.length; i++) {\r\n        particlesArray[i].update();\r\n        ctx.globalAlpha = particlesArray[i].getSpeed() * 0.5;\r\n        particlesArray[i].draw();\r\n    }\r\n    requestAnimationFrame(animate2);\r\n}\r\nfunction rain(evt) {\r\n    init();\r\n    animate();\r\n}\r\nfunction rain2(evt) {\r\n    init();\r\n    animate2();\r\n}\r\n//codigo para efecto de particulas\r\nvar particleArray;\r\nvar mouse = {\r\n    x: null,\r\n    y: null,\r\n    radius: 150\r\n};\r\nfunction handleMouse(e) {\r\n    mouse.x = e.x; // - canvasPosition.left;\r\n    mouse.y = e.y; // - canvasPosition.top;\r\n    //console.log(mouse.x, mouse.y)\r\n}\r\nfunction textEfects(evt) {\r\n    var args = prompt(\"Ingresa texto, tamaño de texto y coord x y y, separados por coma:\");\r\n    var factores = args.split(','); //.map(elem => parseInt(elem));\r\n    pantalla1.font = 'bold  ' + factores[1] + 'px Verdana';\r\n    //let cadena = \r\n    pantalla1.fillText(factores[0], parseInt(factores[2]), parseInt(factores[3]));\r\n    imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, null, 300, 300, true);\r\n    initParticles();\r\n    animateParticles();\r\n}\r\nfunction initParticles() {\r\n    particleArray = [];\r\n    var arrImage = imagenSal.getArrayImg();\r\n    for (var i = 0; i < 300; i++) {\r\n        for (var j = 0; j < 300; j++) {\r\n            if (arrImage[0][i][j] > 128) {\r\n                particleArray.push(new _particle_js__WEBPACK_IMPORTED_MODULE_3__.ParticleText(j, i, pantalla1));\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction animateParticles() {\r\n    pantalla1.clearRect(0, 0, 300, 300);\r\n    for (var i = 0; i < particleArray.length; i++) {\r\n        particleArray[i].update(mouse);\r\n        particleArray[i].draw();\r\n    }\r\n    requestAnimationFrame(animateParticles);\r\n}\r\n//seccion de histogramas  \r\nfunction histogramas(evt) {\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    var canvas1 = lienzo2;\r\n    var graphics1 = pantalla2;\r\n    var canvas2 = lienzo4;\r\n    var graphics2 = pantalla4;\r\n    var hist = _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.hist(imagenSal);\r\n    var miCanvas1 = new _canvasLocal_js__WEBPACK_IMPORTED_MODULE_4__.CanvasLocal(graphics1, canvas1, hist);\r\n    miCanvas1.paint();\r\n    var histAc = _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.histAcum(hist);\r\n    var miCanvas2 = new _canvasLocal_js__WEBPACK_IMPORTED_MODULE_4__.CanvasLocal(graphics2, canvas2, histAc);\r\n    miCanvas2.paint();\r\n}\r\nfunction ecualizado(evt) {\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.ecualizar(imagenSal));\r\n}\r\nfunction erosionarImg(evt) {\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.erosionar(imagenSal, true));\r\n}\r\nfunction dilatarImg(evt) {\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.dilatar(imagenSal, true));\r\n}\r\nfunction aperturaImg(evt) {\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.apertura(imagenSal, true));\r\n}\r\nfunction cierreImg(evt) {\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.cierre(imagenSal, true));\r\n}\r\nfunction opchangeFalsoColor(evt) {\r\n    var argss = prompt('Ingresa un valor de color Hue');\r\n    var hue = parseFloat(argss);\r\n    var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n    imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.fromHSItoRGB(_MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.falseColorByHue(_MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.fromRGBtoHSI(imagenSal), hue, 210)));\r\n}\r\nfunction puntosRec(evt) {\r\n    var posicionX = evt.offsetX;\r\n    var posicionY = evt.offsetY;\r\n    var groSor = 6;\r\n    //pantalla1.clearRect(0, 0, 463, 279); para limpiar el canvas al terminar de guardar\r\n    //pantalla1.clearRect(0, 0, groSor, groSorr\n    pantalla1.fillRect(posicionX, posicionY, groSor, groSor);\r\n    console.log(posicionX);\r\n    console.log(posicionY);\r\n    //arr_numX.push(posicionX);\r\n    //arr_numY.push(posicionY);\r\n    arr_Img.push(pantalla1.getImageData(0, 0, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_5__.DefaultSettings.SIZE_WIDTH, _DefaultSettings_js__WEBPACK_IMPORTED_MODULE_5__.DefaultSettings.SIZE_HEIGHT));\r\n    posImgCv++;\r\n    console.log(arr_Img);\r\n    console.log(posImgCv);\r\n    arrayX.push(posicionX);\r\n    arrayY.push(posicionY);\r\n}\r\nlienzo1.addEventListener('mousemove', handleMouse);\r\nlienzo1.addEventListener(\"mousedown\", puntosRec);\r\n//lienzo1.addEventListener(\"mousemove\", imgLocal.drawSmallImg);\r\ndocument.getElementById('files').addEventListener('change', imgLocal.handleFileSelect, false);\r\ndocument.getElementById('files2').addEventListener('change', imgLocal4.handleFileSelect, false);\r\ndropZone.addEventListener('dragover', handleDragOver, false);\r\ndropZone.addEventListener('drop', imgLocal.handleFileSelect, false);\r\n//menu op basicas\r\ndocument.getElementById(\"op-gris\").addEventListener('click', convertirAGris, false);\r\ndocument.getElementById(\"op-negativo\").addEventListener('click', convertirANegativo, false);\r\ndocument.getElementById(\"op-rojo\").addEventListener('click', convertirARojo, false);\r\ndocument.getElementById(\"op-verde\").addEventListener('click', convertirAVerde, false);\r\ndocument.getElementById(\"op-azul\").addEventListener('click', convertirAAzul, false);\r\ndocument.getElementById(\"op-gamma\").addEventListener('click', correccionGamma, false);\r\ndocument.getElementById(\"op-umbral1\").addEventListener('click', umbralizado, false);\r\ndocument.getElementById(\"op-umbral-2-limites\").addEventListener('click', umbral2limites, false);\r\ndocument.getElementById(\"op-desfaseX\").addEventListener('click', desfaseX, false);\r\ndocument.getElementById(\"op-desfaseY\").addEventListener('click', desfaseY, false);\r\n//menu op. edicion\r\ndocument.getElementById(\"op-brillo\").addEventListener('click', changeBrightness, false);\r\ndocument.getElementById(\"op-gradienteX\").addEventListener('click', colorGradienteX, false);\r\ndocument.getElementById(\"op-gradienteY\").addEventListener('click', colorGradienteY, false);\r\ndocument.getElementById(\"op-contraste\").addEventListener('click', opchangeContraste, false);\r\ndocument.getElementById(\"op-falsocolor\").addEventListener('click', opchangeFalsoColor, false);\r\n//op matematicas\r\ndocument.getElementById(\"op-pow\").addEventListener('click', opgetPow, false);\r\ndocument.getElementById(\"op-sqrt\").addEventListener('click', sqrt, false);\r\ndocument.getElementById(\"op-sine\").addEventListener('click', funcionSine, false);\r\ndocument.getElementById(\"op-cos\").addEventListener('click', coseno, false);\r\ndocument.getElementById(\"op-tan\").addEventListener('click', tan, false);\r\ndocument.getElementById(\"op-add\").addEventListener('click', add, false);\r\ndocument.getElementById(\"op-subtract\").addEventListener('click', subtract, false);\r\ndocument.getElementById(\"op-multiplicacion\").addEventListener('click', multiplicacion, false);\r\ndocument.getElementById(\"op-div\").addEventListener('click', div, false);\r\n//op con imagenes compuestas\r\ndocument.getElementById(\"op-addimg\").addEventListener('click', sumaImg, false);\r\n//op con efectos\r\ndocument.getElementById(\"op-rain\").addEventListener('click', rain, false);\r\ndocument.getElementById(\"op-rain2\").addEventListener('click', rain2, false);\r\n//op con texto.\r\ndocument.getElementById(\"op-text\").addEventListener('click', textEfects, false);\r\n//histogramas\r\ndocument.getElementById(\"op-hist\").addEventListener('click', histogramas, false);\r\ndocument.getElementById(\"op-ecualizar\").addEventListener('click', ecualizado, false);\r\n//mortfologia\r\ndocument.getElementById(\"op-eros\").addEventListener('click', erosionarImg, false);\r\ndocument.getElementById(\"op-dila\").addEventListener('click', dilatarImg, false);\r\ndocument.getElementById(\"op-aper\").addEventListener('click', aperturaImg, false);\r\ndocument.getElementById(\"op-cier\").addEventListener('click', cierreImg, false);\r\nfunction bilinealImg(evt) {\r\n    //let data =[[arr_numX],[arr_numY]];\r\n    /*let data: number[][]= [[55,394,460,1],\r\n                          [2,2,275,275]];*/\r\n    if (!arrayX.length || !arrayY.length || posImgCv < 3) { //comprobamos si el arreglo de puntos esta vacio\r\n        alert(\"Seleccionar los puntos X y Y de la región a ampliar\");\r\n        pantalla1.font = '12px Cambria Math';\r\n        pantalla1.fillText('x1, y1', 10, 10);\r\n        pantalla1.fillText('X2, Y2', 423, 10);\r\n        pantalla1.font = '12px Arial';\r\n        pantalla1.fillText('X3, Y3', 423, 269);\r\n        pantalla1.fillText('X4, Y4', 10, 269);\r\n    }\r\n    else {\r\n        var imagenSal = new _ImageType_js__WEBPACK_IMPORTED_MODULE_1__.ImageType(pantalla1, imgLocal.getImage());\r\n        imagenSal.imageArray2DtoData(pantalla2, _MathImg_js__WEBPACK_IMPORTED_MODULE_2__.MathImg.bilineal(imagenSal, arrayX, arrayY));\r\n    }\r\n}\r\nfunction borrarCanvas(evt) {\r\n    //pantalla2.clearRect(0, 0, 463, 279);\r\n    posImgCv--;\r\n    arr_Img.pop();\r\n    console.log(arr_Img);\r\n    console.log(posImgCv);\r\n    pantalla1.putImageData(arr_Img[posImgCv], 0, 0);\r\n}\r\n//geometrica\r\ndocument.getElementById(\"op-borrarcnv\").addEventListener('click', borrarCanvas, false);\r\ndocument.getElementById(\"op-bilineal\").addEventListener('click', bilinealImg, false);\r\n\n\n//# sourceURL=webpack://proyectoscanner/./dist/src/index.js?");

/***/ }),

/***/ "./dist/src/particle.js":
/*!******************************!*\
  !*** ./dist/src/particle.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Particle\": () => (/* binding */ Particle),\n/* harmony export */   \"ParticleText\": () => (/* binding */ ParticleText)\n/* harmony export */ });\nvar Particle = /** @class */ (function () {\r\n    function Particle(width, height, screenCanvas, mapImg) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.ctx = screenCanvas;\r\n        this.x = Math.random() * width;\r\n        this.y = 0;\r\n        this.speed = 0;\r\n        this.velocity = Math.random() * 2.5;\r\n        this.size = Math.random() * 1.5 + 1;\r\n        this._2PI = Math.PI * 2;\r\n        this.position1 = Math.floor(this.y);\r\n        this.position2 = Math.floor(this.x);\r\n        this.mappedImage = mapImg;\r\n    }\r\n    Particle.prototype.update = function () {\r\n        this.position1 = Math.floor(this.y);\r\n        this.position2 = Math.floor(this.x);\r\n        var movement = 0;\r\n        if (this.y < this.height) {\r\n            this.speed = this.mappedImage[0][this.position1][this.position2];\r\n            movement = (2.5 - this.speed) + this.velocity;\r\n        }\r\n        this.y += movement;\r\n        if (this.y >= this.height) {\r\n            this.y = 0;\r\n            this.x = Math.random() * this.width;\r\n        }\r\n    };\r\n    Particle.prototype.draw = function () {\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = this.mappedImage[1][this.position1][this.position2];\r\n        this.ctx.arc(this.x, this.y, this.size, 0, this._2PI);\r\n        this.ctx.fill();\r\n    };\r\n    Particle.prototype.getSpeed = function () {\r\n        return this.speed;\r\n    };\r\n    return Particle;\r\n}());\r\n\r\nvar ParticleText = /** @class */ (function () {\r\n    function ParticleText(x, y, screenCanvas, mapImg) {\r\n        this.ctx = screenCanvas;\r\n        this.x = x; // + 200;\r\n        this.y = y; // - 100,\r\n        this.size = 2;\r\n        this.baseX = this.x;\r\n        this.baseY = this.y;\r\n        this.density = ((Math.random() * 30) + 1);\r\n        this._2PI = Math.PI * 2;\r\n        this.mappedImage = mapImg;\r\n    }\r\n    ParticleText.prototype.update = function (mouse) {\r\n        var dx = mouse.x - this.x;\r\n        var dy = mouse.y - this.y;\r\n        var distance = Math.sqrt(dx * dx + dy * dy);\r\n        var forceDirectionX = dx / distance;\r\n        var forceDirectionY = dy / distance;\r\n        var maxDistance = mouse.radius;\r\n        var force = (maxDistance - distance) / maxDistance;\r\n        var directionX = (forceDirectionX * force * this.density);\r\n        var directionY = (forceDirectionY * force * this.density);\r\n        if (distance < mouse.radius) {\r\n            this.x -= directionX;\r\n            this.y -= directionY;\r\n        }\r\n        else {\r\n            if (this.x !== this.baseX) {\r\n                var dx_1 = this.x - this.baseX;\r\n                this.x -= dx_1 / 5;\r\n            }\r\n            if (this.y !== this.baseY) {\r\n                var dy_1 = this.y - this.baseY;\r\n                this.y -= dy_1 / 5;\r\n            }\r\n        }\r\n    };\r\n    ParticleText.prototype.draw = function () {\r\n        this.ctx.fillStyle = 'red';\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(this.x, this.y, this.size, 0, this._2PI);\r\n        this.ctx.closePath();\r\n        this.ctx.fill();\r\n    };\r\n    return ParticleText;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://proyectoscanner/./dist/src/particle.js?");

/***/ }),

/***/ "./node_modules/@felipeaamacedo/matrix-ts/lib/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@felipeaamacedo/matrix-ts/lib/index.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./matrix-ts */ \"./node_modules/@felipeaamacedo/matrix-ts/lib/matrix-ts.js\"), exports);\n//# sourceMappingURL=index.js.map\n\n//# sourceURL=webpack://proyectoscanner/./node_modules/@felipeaamacedo/matrix-ts/lib/index.js?");

/***/ }),

/***/ "./node_modules/@felipeaamacedo/matrix-ts/lib/matrix-ts.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@felipeaamacedo/matrix-ts/lib/matrix-ts.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.multiplyRowByConstant = exports.swapRow = exports.augmentedMatrix = exports.copyMatrix = exports.inv = exports.GaussEli = exports.MatIdentity = exports.ArraySubtr = exports.MatSubtr = exports.MatSum = exports.multiply = exports.Matrix = void 0;\nclass Matrix {\n    constructor(_row, _col) {\n        this._row = _row;\n        this._col = _col;\n        this._data = new Array();\n        //CREATING THE MATRIX\n        for (let i = 0; i < this._row; i++) {\n            this._data.push(Array(this._col));\n        }\n    }\n    get row() {\n        return this._row;\n    }\n    get col() {\n        return this._col;\n    }\n    get data() {\n        return this._data;\n    }\n    set data(A) {\n        for (let j = 0; j < this.row; j++) {\n            if ((A.length !== this.row) && (A[j].length !== this.col)) {\n                throw new Error('Number of rows or colums are different from the specified in the matrix, please check it');\n            }\n            else {\n                this._data = A;\n            }\n        }\n    }\n    /**\n    * Gives the size of a matrix in form of number[]\n    */\n    size() {\n        return [this.row, this.col];\n    }\n    /**\n    * Calculates the determinant of the matrix.\n    */\n    determinant() {\n        if (this.row !== this._col) {\n            throw new Error('The matrix is not a square');\n        }\n        else {\n            if (this.row == 2) {\n                return this.data[0][0] * this.data[1][1] - this.data[0][1] * this.data[1][0];\n            }\n            else {\n                let iCof = 1;\n                let sum = 0;\n                for (let j = 0; j < this._col; j++) {\n                    sum = sum + this.data[iCof - 1][j] * Math.pow((-1), (iCof + j + 1)) * this.sub_matrix(iCof, j + 1).determinant();\n                }\n                return sum;\n            }\n        }\n    }\n    /**\n    * Calculates the sub_matrix used in the determinant calculation\n    */\n    sub_matrix(del_row, del_col) {\n        del_col = del_col - 1;\n        del_row = del_row - 1;\n        let subMatrix = new Matrix(this.row - 1, this._col - 1);\n        let flagRow = false;\n        let flagCol = false;\n        for (let j = 0; j < this._col; j++) {\n            flagRow = false;\n            if ((j == del_col) && (del_col < this._col)) {\n                j++;\n                flagCol = true;\n            }\n            for (let i = 0; i < this.row; i++) {\n                if ((i == del_row) && (del_row < this.row)) {\n                    i++;\n                    flagRow = true;\n                }\n                if ((flagCol == true) && (flagRow == false)) {\n                    subMatrix.data[i][j - 1] = this.data[i][j];\n                }\n                else if ((flagCol == false) && (flagRow == true)) {\n                    subMatrix.data[i - 1][j] = this.data[i][j];\n                }\n                else if ((flagCol == true) && (flagRow == true)) {\n                    subMatrix.data[i - 1][j - 1] = this.data[i][j];\n                }\n                else {\n                    subMatrix.data[i][j] = this.data[i][j];\n                }\n            }\n        }\n        return subMatrix;\n    }\n}\nexports.Matrix = Matrix;\n/**\n* Multiply two given matrices, MatA[i][j] and MatB[j][p]\n* @param MatA Input MatA.\n* @param MatB Input MatB.\n*/\nfunction multiply(MatA, MatB) {\n    let MatA_Row = MatA.row;\n    let MatA_Col = MatA.col;\n    let MatB_Row = MatB.row;\n    let MatB_Col = MatB.col;\n    if (MatA_Col !== MatB_Row) {\n        throw new Error('Number of cols in Mat1 is different from Mat2 rows');\n    }\n    let MatC = new Matrix(MatA_Row, MatB_Col);\n    for (let i = 0; i < MatA_Row; i++) {\n        for (let j = 0; j < MatB_Col; j++) {\n            let sum = 0;\n            for (let k = 0; k < MatB_Row; k++) {\n                sum = sum + MatA.data[i][k] * MatB.data[k][j];\n            }\n            MatC.data[i][j] = sum;\n        }\n    }\n    return MatC;\n}\nexports.multiply = multiply;\n/**\n* Calculates the transpose of a five matrix.\n* @param M Input matrix M to be transposed.\n* /\nexport function transpose(M:Matrix):Matrix{\n    let Mtransp:Matrix= new Matrix(M.row, M.col)\n    for(let i=0; i<M.row;i++){\n        for(let j=0;j<M.col;j++){\n            Mtransp.data[j][i] = M.data[i][j]\n        }\n    }\n\n    return Mtransp\n}\n\n/**\n* Sum two matrices with the same order.\n* @param MatA Input the first Matrix\n* @param MatB Input the second matrix\n*/\nfunction MatSum(MatA, MatB) {\n    let MatSum = new Matrix(MatA.row, MatA.col);\n    for (let j = 0; j < MatA.col; j++) {\n        for (let i = 0; i < MatA.row; i++) {\n            MatSum.data[i][j] = MatA.data[i][j] + MatB.data[i][j];\n        }\n    }\n    return MatSum;\n}\nexports.MatSum = MatSum;\n/**\n* Subtracts two matrices with the same order.\n* @param MatA Input the first Matrix\n* @param MatB Input the second matrix\n*/\nfunction MatSubtr(MatA, MatB) {\n    let MatSubtr = new Matrix(MatA.row, MatA.col);\n    for (let j = 0; j < MatA.col; j++) {\n        for (let i = 0; i < MatA.row; i++) {\n            MatSubtr.data[i][j] = MatA.data[i][j] - MatB.data[i][j];\n        }\n    }\n    return MatSubtr;\n}\nexports.MatSubtr = MatSubtr;\n/**\n* Subtracts two arrays with the same length.\n* @param ArrayA Input the first Array.\n* @param ArrayB Input the second Array.\n*/\nfunction ArraySubtr(ArrayA, ArrayB) {\n    let ArraySubtr = new Array(ArrayA.length);\n    for (let j = 0; j < ArraySubtr.length; j++) {\n        ArraySubtr[j] = ArrayA[j] - ArrayB[j];\n    }\n    return ArraySubtr;\n}\nexports.ArraySubtr = ArraySubtr;\n/**\n* Creates a matrix identity with a given order.\n* @param order Input order of the matrix.\n*/\nfunction MatIdentity(order) {\n    let MatIdentity = new Matrix(order, order);\n    for (let j = 0; j < order; j++) {\n        for (let i = 0; i < order; i++) {\n            if (i == j) {\n                MatIdentity.data[i][j] = 1;\n            }\n            else {\n                MatIdentity.data[i][j] = 0;\n            }\n        }\n    }\n    return MatIdentity;\n}\nexports.MatIdentity = MatIdentity;\n/**\n* Calculates linear system using Gaussian elimination.\n* @param A Input the matrix of coefficients.\n* @param b Input the vector with results\n*/\nfunction GaussEli(A, b) {\n    let x = new Array(A.row);\n    let M = new Matrix(A.row, A.col);\n    for (let j = 0; j < A.col; j++) {\n        for (let i = j + 1; i < A.col + 1; i++) {\n            M.data[i][j] = A.data[i][j] / A.data[j][j];\n            for (let k = j + 1; k < A.col + 1; k++) {\n                A.data[i][k] = A.data[i][k] - M.data[i][j] * A.data[j][k];\n            }\n            b[i] = b[i] - M.data[i][j] * b[j];\n        }\n    }\n    return x;\n}\nexports.GaussEli = GaussEli;\n/**\n *\tThis function uses Gauss-Jordan elimination to invert matrices.\n *\t@param M Matrix to be inverted\n */\nfunction inv(M) {\n    let M_inv = new Matrix(M.row, M.col);\n    let M_aug = augmentedMatrix(M);\n    let repeatFlag = false;\n    for (let i = 0; i < M_aug.row; i++) {\n        if (repeatFlag == true) {\n            i = i - 1;\n            repeatFlag = false;\n        }\n        if (M_aug.data[i][i] == 0) {\n            if (i + 1 < M_aug.row) {\n                M_aug = swapRow(M_aug, i, i + 1);\n                repeatFlag = true;\n            }\n            else {\n                throw new Error('This matrix is not inverteble');\n            }\n        }\n        else {\n            M_aug.data[i] = multiplyRowByConstant(M_aug.data[i], (1 / M_aug.data[i][i]));\n        }\n        for (let k = 0; k < M_aug.row; k++) {\n            if (k !== i) {\n                M_aug.data[k] = ArraySubtr(M_aug.data[k], multiplyRowByConstant(M_aug.data[i], M_aug.data[k][i]));\n            }\n        }\n    }\n    for (let j = M.col; j < M_aug.col; j++) {\n        for (let i = 0; i < M_aug.row; i++) {\n            M_inv.data[i][j - M.col] = M_aug.data[i][j];\n        }\n    }\n    return M_inv;\n}\nexports.inv = inv;\n/**\n* Copy the values of a matrix to another\n* @param Mto input the matrix that you want the values be copied to\n* @param Mfrom input the matrix that you want the vvalues to be copied from\n*/\nfunction copyMatrix(Mto, Mfrom) {\n    for (let j = 0; j < Mfrom.col; j++) {\n        for (let i = 0; i < Mfrom.row; i++) {\n            Mto.data[i][j] = Mfrom.data[i][j];\n        }\n    }\n    return Mto;\n}\nexports.copyMatrix = copyMatrix;\n/**\n* Creates the augmented matrix to use in matrix inversion.\n* @param M Insert the matrix to be used in the augmented matrix.\n*/\nfunction augmentedMatrix(M) {\n    let augmentedMatrix = new Matrix(M.row, M.col + M.col);\n    let identity = MatIdentity(M.row);\n    for (let j = 0; j < M.col; j++) {\n        for (let i = 0; i < augmentedMatrix.row; i++) {\n            augmentedMatrix.data[i][j] = M.data[i][j];\n        }\n    }\n    for (let j = M.col; j < augmentedMatrix.col; j++) {\n        for (let i = 0; i < augmentedMatrix.row; i++) {\n            augmentedMatrix.data[i][j] = identity.data[i][j - M.col];\n        }\n    }\n    return augmentedMatrix;\n}\nexports.augmentedMatrix = augmentedMatrix;\n/**\n* This function swaps two chosen rows in a given matrix\n* @param M choose the Matrix that rows will be swaped.\n* @param row1 define row1 to be swaped\n* @param row2 define second row to be swaped with the first\n*/\nfunction swapRow(M, row1, row2) {\n    //ERROR CHECKER if either input rows are negative or higher value than input Matrix.\n    if (((row1 < 0) || (row2 < 0))) {\n        throw new Error('Number of rows specified out of limits');\n    }\n    if ((row1 >= M.row) || (row2 >= M.row)) {\n        throw new Error('Number of rows specified out of limits');\n    }\n    //End of ERROR CHECKER\n    let swapMatrix = new Matrix(M.row, M.col);\n    copyMatrix(swapMatrix, M);\n    let saveRow = new Array(M.col);\n    for (let j = 0; j < M.col; j++) {\n        saveRow[j] = swapMatrix.data[row1][j];\n    }\n    for (let j = 0; j < M.col; j++) {\n        swapMatrix.data[row1][j] = swapMatrix.data[row2][j];\n    }\n    for (let j = 0; j < M.col; j++) {\n        swapMatrix.data[row2][j] = saveRow[j];\n    }\n    return swapMatrix;\n}\nexports.swapRow = swapRow;\n/**\n* This function multiplay a given array by a constant number\n* @param Row define the row that will be multiplied by a constant\n* @param constat define the constant that will multiply the row. For a division, just insert 1/constant.\n*/\nfunction multiplyRowByConstant(Row, constant) {\n    let multipliedArray = new Array(Row.length);\n    for (let j = 0; j < Row.length; j++) {\n        multipliedArray[j] = constant * Row[j];\n    }\n    return multipliedArray;\n}\nexports.multiplyRowByConstant = multiplyRowByConstant;\n//# sourceMappingURL=matrix-ts.js.map\n\n//# sourceURL=webpack://proyectoscanner/./node_modules/@felipeaamacedo/matrix-ts/lib/matrix-ts.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./dist/src/index.js");
/******/ 	
/******/ })()
;